<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.4.1.RELEASE</version>
        <relativePath/>
    </parent>

    <artifactId>kompose-maven-example</artifactId>
    <groupId>io.fabric8</groupId>
    <version>3.5</version>
    <packaging>jar</packaging>

	<url>https://github.com/introproventures</url>
    <name>Fabric8 Maven :: Sample :: Springboot Docker compose</name>
    <description>Demo project for Springboot and docker compose</description>

	<scm>
		<url>https://github.com/introproventures/kompose-maven-example</url>
	</scm>
	<developers>
		<developer>
			<id>igdianov</id>
			<name>Igor Dianov</name>
			<email>igor.dianov at introproventures.com</email>
			<organization>IntroPro Ventures Inc.</organization>
			<organizationUrl>http://www.introproventures.com</organizationUrl>
			<roles>
				<role>CTO</role>
			</roles>
		</developer>
	</developers>

    <properties>	
    	<dockerfile.repository>fabric8/${project.artifactId}</dockerfile.repository>
    	<dockerfile.tag>${project.version}</dockerfile.tag>
    	
    	<helm.chartDirectory>target/charts</helm.chartDirectory>
    	<helm.chartVersion>${project.version}</helm.chartVersion>
    	<helm.outputDirectory>target/helm/repo</helm.outputDirectory>
		<helm.downloadUrl>https://storage.googleapis.com/kubernetes-helm/helm-v2.9.1-${helm.platform}-amd64.tar.gz</helm.downloadUrl>
		<helm.executableDirectory>target/helm</helm.executableDirectory>    	
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
          <plugin>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-maven-plugin</artifactId>
          </plugin>

			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<configuration>
					<delimiters>
					  <delimiter>${*}</delimiter>
					</delimiters>							
				</configuration>
				<executions>
					<execution>
						<id>generate-charts</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${helm.chartDirectory}</outputDirectory>
							<resources>
								<resource>
									<directory>src/main/charts</directory>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>com.kiwigrid</groupId>
				<artifactId>helm-maven-plugin</artifactId>
				<version>2.6</version>
				<configuration>
			        <helmExtraRepos>
<!--
 			          <helmRepo>
			            <name>chartmuseum</name>
			            <url>http://jenkins-x-chartmuseum:8080</url>
			          </helmRepo>
 -->
 			          <helmRepo>
			            <name>chartmuseum</name>
			            <url>https://chartmuseum.build.cd.jenkins-x.io</url>
			          </helmRepo>
			        </helmExtraRepos>				    		
				</configuration>
				<executions>
					<execution>
						<id>init-helm</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>init</goal>
						</goals>
					</execution>
					<execution>
						<id>package-helm</id>
						<phase>package</phase>
						<goals>
							<goal>dependency-build</goal>
							<goal>package</goal>
							<goal>lint</goal>
							<!--goal>dry-run</goal-->
						</goals>
					</execution>
				</executions>
			</plugin>

          <!-- Build Docker images -->
          <plugin>
            <groupId>com.spotify</groupId>
            <artifactId>dockerfile-maven-plugin</artifactId>
            <version>1.4.3</version>
            <configuration>
              <googleContainerRegistryEnabled>false</googleContainerRegistryEnabled>
              <pullNewerImage>false</pullNewerImage>
              <buildArgs>
                <JAR_FILE>target/${project.build.finalName}.jar</JAR_FILE>
              </buildArgs>
              
            </configuration>
            <executions>
              <execution>
                <id>default</id>
                <phase>package</phase>
                <goals>
                  <goal>build</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

<!--           Build Kubernetes cluster resources
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>fabric8-maven-plugin</artifactId>
            <version>3.5.39</version>
			<configuration>
				<helm>
					<chart>docker-compose</chart>
					<chartExtension>tgz</chartExtension>
				</helm>
				<composeFile>docker-compose.yml</composeFile>
 				<enricher>
					<excludes>
						<exclude>spring-boot-health-check</exclude>
					</excludes>
				</enricher>
			</configuration>        
            <executions>
              <execution>
                <id>fmp</id>
                <phase>package</phase>
                <goals>
                  <goal>resource</goal>
                  <goal>helm</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
 -->
      </plugins>
    </build>
    
   <profiles>
	   <profile>
	     <id>win-build</id>
	     <activation>
	       <os>
	         <family>Windows</family>
	       </os>
	     </activation>
	     <properties>
	     	<helm.platform>windows</helm.platform>
	     </properties>
	   </profile>
	   <profile>
	     <id>mac-build</id>
	     <activation>
	       <os>
	         <family>Mac</family>
	       </os>
	     </activation>
	     <properties>
	     	<helm.platform>darwin</helm.platform>
	     </properties>
	   </profile>    
	   <profile>
	     <id>unix-build</id>
	     <activation>
	       <os>
	         <family>Unix</family>
	       </os>
	     </activation>
	     <properties>
	     	<helm.platform>linux</helm.platform>
	     </properties>
	   </profile>    
   </profiles>
</project>
